-- ERP Database Schema (PostgreSQL)
-- Safe to run on a new database. Creates types, tables, constraints, and helpful indexes.
-- Author: Generated by assistant on 2025-09-03

-- =============================
-- ENUM TYPES
-- =============================
CREATE TYPE order_status AS ENUM ('DRAFT','CONFIRMED','SHIPPED','CANCELLED','CLOSED');
CREATE TYPE po_status AS ENUM ('DRAFT','ORDERED','RECEIVED','CANCELLED','CLOSED');
CREATE TYPE invoice_type AS ENUM ('SALES','PURCHASE');
CREATE TYPE invoice_status AS ENUM ('DRAFT','ISSUED','PARTIAL','PAID','CANCELLED');
CREATE TYPE payment_type AS ENUM ('INCOMING','OUTGOING');
CREATE TYPE payment_method AS ENUM ('CASH','BANK_TRANSFER','CARD','CHEQUE','UPI','OTHER');
CREATE TYPE movement_type AS ENUM ('IN','OUT','ADJUST');
CREATE TYPE source_type AS ENUM ('PO','SO','INVOICE','ADJUSTMENT');

-- =============================
-- CORE TABLES
-- =============================
CREATE TABLE companies (
  id               BIGSERIAL PRIMARY KEY,
  name             TEXT NOT NULL,
  legal_name       TEXT,
  tax_id           TEXT, -- GSTIN/VAT/TIN etc.
  email            TEXT,
  phone            TEXT,
  website          TEXT,
  address_line1    TEXT,
  address_line2    TEXT,
  city             TEXT,
  state            TEXT,
  postal_code      TEXT,
  country          TEXT,
  currency_code    CHAR(3) NOT NULL DEFAULT 'INR',
  created_at       TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at       TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  CONSTRAINT companies_name_uniq UNIQUE (name)
);
CREATE INDEX companies_country_idx ON companies(country);

CREATE TABLE roles (
  id          BIGSERIAL PRIMARY KEY,
  name        TEXT NOT NULL UNIQUE,
  description TEXT
);

CREATE TABLE users (
  id            BIGSERIAL PRIMARY KEY,
  company_id    BIGINT NOT NULL REFERENCES companies(id) ON UPDATE CASCADE ON DELETE RESTRICT,
  email         TEXT NOT NULL,
  full_name     TEXT NOT NULL,
  password_hash TEXT NOT NULL,
  is_active     BOOLEAN NOT NULL DEFAULT TRUE,
  last_login    TIMESTAMPTZ,
  created_at    TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at    TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  CONSTRAINT users_email_company_unique UNIQUE (company_id, email)
);
CREATE INDEX users_company_idx ON users(company_id);

CREATE TABLE user_roles (
  user_id BIGINT NOT NULL REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE,
  role_id BIGINT NOT NULL REFERENCES roles(id) ON UPDATE CASCADE ON DELETE RESTRICT,
  PRIMARY KEY (user_id, role_id)
);

-- =============================
-- BUSINESS PARTNERS
-- =============================
CREATE TABLE customers (
  id              BIGSERIAL PRIMARY KEY,
  company_id      BIGINT NOT NULL REFERENCES companies(id) ON UPDATE CASCADE ON DELETE RESTRICT,
  code            TEXT NOT NULL,
  name            TEXT NOT NULL,
  email           TEXT,
  phone           TEXT,
  tax_number      TEXT, -- GSTIN/VAT for customer
  billing_address_line1 TEXT,
  billing_address_line2 TEXT,
  billing_city     TEXT,
  billing_state    TEXT,
  billing_postal_code TEXT,
  billing_country  TEXT,
  shipping_address_line1 TEXT,
  shipping_address_line2 TEXT,
  shipping_city     TEXT,
  shipping_state    TEXT,
  shipping_postal_code TEXT,
  shipping_country  TEXT,
  credit_limit     NUMERIC(14,2) DEFAULT 0,
  notes            TEXT,
  created_at       TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at       TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  CONSTRAINT customers_code_unique UNIQUE (company_id, code)
);
CREATE INDEX customers_company_idx ON customers(company_id);
CREATE INDEX customers_name_trgm_idx ON customers USING GIN (name gin_trgm_ops);

CREATE TABLE suppliers (
  id              BIGSERIAL PRIMARY KEY,
  company_id      BIGINT NOT NULL REFERENCES companies(id) ON UPDATE CASCADE ON DELETE RESTRICT,
  code            TEXT NOT NULL,
  name            TEXT NOT NULL,
  email           TEXT,
  phone           TEXT,
  tax_number      TEXT, -- GSTIN/VAT for supplier
  address_line1   TEXT,
  address_line2   TEXT,
  city            TEXT,
  state           TEXT,
  postal_code     TEXT,
  country         TEXT,
  notes           TEXT,
  created_at      TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at      TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  CONSTRAINT suppliers_code_unique UNIQUE (company_id, code)
);
CREATE INDEX suppliers_company_idx ON suppliers(company_id);
CREATE INDEX suppliers_name_trgm_idx ON suppliers USING GIN (name gin_trgm_ops);

-- =============================
-- PRODUCTS & CATEGORIES
-- =============================
CREATE TABLE product_categories (
  id          BIGSERIAL PRIMARY KEY,
  company_id  BIGINT NOT NULL REFERENCES companies(id) ON UPDATE CASCADE ON DELETE RESTRICT,
  name        TEXT NOT NULL,
  parent_id   BIGINT REFERENCES product_categories(id) ON UPDATE CASCADE ON DELETE SET NULL,
  created_at  TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at  TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  CONSTRAINT product_categories_unique_name UNIQUE (company_id, name)
);
CREATE INDEX product_categories_company_idx ON product_categories(company_id);

CREATE TABLE products (
  id            BIGSERIAL PRIMARY KEY,
  company_id    BIGINT NOT NULL REFERENCES companies(id) ON UPDATE CASCADE ON DELETE RESTRICT,
  sku           TEXT NOT NULL,
  name          TEXT NOT NULL,
  description   TEXT,
  hsn_code      TEXT, -- HSN/SAC code
  category_id   BIGINT REFERENCES product_categories(id) ON UPDATE CASCADE ON DELETE SET NULL,
  unit          TEXT NOT NULL DEFAULT 'PCS', -- e.g., PCS, KG, LTR
  cost_price    NUMERIC(14,2) NOT NULL DEFAULT 0,
  selling_price NUMERIC(14,2) NOT NULL DEFAULT 0,
  gst_rate      NUMERIC(5,2) DEFAULT 0, -- percent
  is_active     BOOLEAN NOT NULL DEFAULT TRUE,
  created_at    TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at    TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  CONSTRAINT products_sku_unique UNIQUE (company_id, sku)
);
CREATE INDEX products_company_idx ON products(company_id);
CREATE INDEX products_category_idx ON products(category_id);
CREATE INDEX products_name_trgm_idx ON products USING GIN (name gin_trgm_ops);

-- =============================
-- WAREHOUSES & INVENTORY
-- =============================
CREATE TABLE warehouses (
  id            BIGSERIAL PRIMARY KEY,
  company_id    BIGINT NOT NULL REFERENCES companies(id) ON UPDATE CASCADE ON DELETE RESTRICT,
  code          TEXT NOT NULL,
  name          TEXT NOT NULL,
  address_line1 TEXT,
  address_line2 TEXT,
  city          TEXT,
  state         TEXT,
  postal_code   TEXT,
  country       TEXT,
  created_at    TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at    TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  CONSTRAINT warehouses_code_unique UNIQUE (company_id, code)
);
CREATE INDEX warehouses_company_idx ON warehouses(company_id);

CREATE TABLE inventory_movements (
  id            BIGSERIAL PRIMARY KEY,
  company_id    BIGINT NOT NULL REFERENCES companies(id) ON UPDATE CASCADE ON DELETE RESTRICT,
  product_id    BIGINT NOT NULL REFERENCES products(id) ON UPDATE CASCADE ON DELETE RESTRICT,
  warehouse_id  BIGINT NOT NULL REFERENCES warehouses(id) ON UPDATE CASCADE ON DELETE RESTRICT,
  qty           NUMERIC(14,3) NOT NULL, -- positive for IN, negative for OUT (or use type)
  move_type     movement_type NOT NULL,
  source_kind   source_type,
  source_id     BIGINT,
  source_line_id BIGINT,
  occurred_at   TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  created_by    BIGINT REFERENCES users(id) ON UPDATE CASCADE ON DELETE SET NULL,
  note          TEXT
);
CREATE INDEX invmov_company_product_wh_time_idx ON inventory_movements(company_id, product_id, warehouse_id, occurred_at);

-- Helper view: current on-hand per product and warehouse
CREATE OR REPLACE VIEW v_inventory_on_hand AS
SELECT 
  company_id, product_id, warehouse_id,
  SUM(qty) AS on_hand
FROM inventory_movements
GROUP BY company_id, product_id, warehouse_id;

-- =============================
-- SALES ORDERS
-- =============================
CREATE TABLE sales_orders (
  id              BIGSERIAL PRIMARY KEY,
  company_id      BIGINT NOT NULL REFERENCES companies(id) ON UPDATE CASCADE ON DELETE RESTRICT,
  customer_id     BIGINT NOT NULL REFERENCES customers(id) ON UPDATE CASCADE ON DELETE RESTRICT,
  order_number    TEXT NOT NULL,
  status          order_status NOT NULL DEFAULT 'DRAFT',
  order_date      DATE NOT NULL DEFAULT CURRENT_DATE,
  expected_ship_date DATE,
  currency_code   CHAR(3) NOT NULL DEFAULT 'INR',
  subtotal        NUMERIC(14,2) NOT NULL DEFAULT 0,
  discount_total  NUMERIC(14,2) NOT NULL DEFAULT 0,
  tax_total       NUMERIC(14,2) NOT NULL DEFAULT 0,
  grand_total     NUMERIC(14,2) NOT NULL DEFAULT 0,
  notes           TEXT,
  created_by      BIGINT REFERENCES users(id) ON UPDATE CASCADE ON DELETE SET NULL,
  created_at      TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at      TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  CONSTRAINT so_unique_number UNIQUE (company_id, order_number)
);
CREATE INDEX so_company_idx ON sales_orders(company_id);
CREATE INDEX so_customer_idx ON sales_orders(customer_id);

CREATE TABLE sales_order_lines (
  id             BIGSERIAL PRIMARY KEY,
  sales_order_id BIGINT NOT NULL REFERENCES sales_orders(id) ON UPDATE CASCADE ON DELETE CASCADE,
  line_no        INTEGER NOT NULL,
  product_id     BIGINT NOT NULL REFERENCES products(id) ON UPDATE CASCADE ON DELETE RESTRICT,
  description    TEXT,
  quantity       NUMERIC(14,3) NOT NULL,
  unit           TEXT NOT NULL DEFAULT 'PCS',
  unit_price     NUMERIC(14,2) NOT NULL,
  discount_percent NUMERIC(5,2) NOT NULL DEFAULT 0,
  tax_percent    NUMERIC(5,2) NOT NULL DEFAULT 0,
  line_total     NUMERIC(14,2) NOT NULL DEFAULT 0,
  CONSTRAINT so_lines_unique_line UNIQUE (sales_order_id, line_no)
);
CREATE INDEX so_lines_product_idx ON sales_order_lines(product_id);

-- =============================
-- PURCHASE ORDERS
-- =============================
CREATE TABLE purchase_orders (
  id              BIGSERIAL PRIMARY KEY,
  company_id      BIGINT NOT NULL REFERENCES companies(id) ON UPDATE CASCADE ON DELETE RESTRICT,
  supplier_id     BIGINT NOT NULL REFERENCES suppliers(id) ON UPDATE CASCADE ON DELETE RESTRICT,
  po_number       TEXT NOT NULL,
  status          po_status NOT NULL DEFAULT 'DRAFT',
  order_date      DATE NOT NULL DEFAULT CURRENT_DATE,
  expected_receive_date DATE,
  currency_code   CHAR(3) NOT NULL DEFAULT 'INR',
  subtotal        NUMERIC(14,2) NOT NULL DEFAULT 0,
  discount_total  NUMERIC(14,2) NOT NULL DEFAULT 0,
  tax_total       NUMERIC(14,2) NOT NULL DEFAULT 0,
  grand_total     NUMERIC(14,2) NOT NULL DEFAULT 0,
  notes           TEXT,
  created_by      BIGINT REFERENCES users(id) ON UPDATE CASCADE ON DELETE SET NULL,
  created_at      TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at      TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  CONSTRAINT po_unique_number UNIQUE (company_id, po_number)
);
CREATE INDEX po_company_idx ON purchase_orders(company_id);
CREATE INDEX po_supplier_idx ON purchase_orders(supplier_id);

CREATE TABLE purchase_order_lines (
  id               BIGSERIAL PRIMARY KEY,
  purchase_order_id BIGINT NOT NULL REFERENCES purchase_orders(id) ON UPDATE CASCADE ON DELETE CASCADE,
  line_no          INTEGER NOT NULL,
  product_id       BIGINT NOT NULL REFERENCES products(id) ON UPDATE CASCADE ON DELETE RESTRICT,
  description      TEXT,
  quantity         NUMERIC(14,3) NOT NULL,
  unit             TEXT NOT NULL DEFAULT 'PCS',
  unit_price       NUMERIC(14,2) NOT NULL,
  tax_percent      NUMERIC(5,2) NOT NULL DEFAULT 0,
  line_total       NUMERIC(14,2) NOT NULL DEFAULT 0,
  CONSTRAINT po_lines_unique_line UNIQUE (purchase_order_id, line_no)
);
CREATE INDEX po_lines_product_idx ON purchase_order_lines(product_id);

-- =============================
-- INVOICES
-- =============================
CREATE TABLE invoices (
  id              BIGSERIAL PRIMARY KEY,
  company_id      BIGINT NOT NULL REFERENCES companies(id) ON UPDATE CASCADE ON DELETE RESTRICT,
  type            invoice_type NOT NULL,
  customer_id     BIGINT REFERENCES customers(id) ON UPDATE CASCADE ON DELETE RESTRICT,
  supplier_id     BIGINT REFERENCES suppliers(id) ON UPDATE CASCADE ON DELETE RESTRICT,
  sales_order_id  BIGINT REFERENCES sales_orders(id) ON UPDATE CASCADE ON DELETE SET NULL,
  purchase_order_id BIGINT REFERENCES purchase_orders(id) ON UPDATE CASCADE ON DELETE SET NULL,
  invoice_number  TEXT NOT NULL,
  status          invoice_status NOT NULL DEFAULT 'DRAFT',
  invoice_date    DATE NOT NULL DEFAULT CURRENT_DATE,
  due_date        DATE,
  currency_code   CHAR(3) NOT NULL DEFAULT 'INR',
  subtotal        NUMERIC(14,2) NOT NULL DEFAULT 0,
  discount_total  NUMERIC(14,2) NOT NULL DEFAULT 0,
  tax_total       NUMERIC(14,2) NOT NULL DEFAULT 0,
  grand_total     NUMERIC(14,2) NOT NULL DEFAULT 0,
  notes           TEXT,
  created_by      BIGINT REFERENCES users(id) ON UPDATE CASCADE ON DELETE SET NULL,
  created_at      TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at      TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  CONSTRAINT invoices_number_unique UNIQUE (company_id, type, invoice_number),
  CONSTRAINT invoices_party_check CHECK (
    (type = 'SALES' AND customer_id IS NOT NULL AND supplier_id IS NULL) OR
    (type = 'PURCHASE' AND supplier_id IS NOT NULL AND customer_id IS NULL)
  )
);
CREATE INDEX invoices_company_idx ON invoices(company_id);
CREATE INDEX invoices_customer_idx ON invoices(customer_id);
CREATE INDEX invoices_supplier_idx ON invoices(supplier_id);

CREATE TABLE invoice_lines (
  id             BIGSERIAL PRIMARY KEY,
  invoice_id     BIGINT NOT NULL REFERENCES invoices(id) ON UPDATE CASCADE ON DELETE CASCADE,
  line_no        INTEGER NOT NULL,
  product_id     BIGINT REFERENCES products(id) ON UPDATE CASCADE ON DELETE SET NULL,
  description    TEXT NOT NULL,
  quantity       NUMERIC(14,3) NOT NULL DEFAULT 1,
  unit           TEXT NOT NULL DEFAULT 'PCS',
  unit_price     NUMERIC(14,2) NOT NULL DEFAULT 0,
  tax_percent    NUMERIC(5,2) NOT NULL DEFAULT 0,
  line_total     NUMERIC(14,2) NOT NULL DEFAULT 0,
  CONSTRAINT invoice_lines_unique_line UNIQUE (invoice_id, line_no)
);
CREATE INDEX invoice_lines_product_idx ON invoice_lines(product_id);

-- =============================
-- PAYMENTS
-- =============================
CREATE TABLE payments (
  id            BIGSERIAL PRIMARY KEY,
  company_id    BIGINT NOT NULL REFERENCES companies(id) ON UPDATE CASCADE ON DELETE RESTRICT,
  type          payment_type NOT NULL, -- INCOMING from customers, OUTGOING to suppliers
  method        payment_method NOT NULL DEFAULT 'OTHER',
  customer_id   BIGINT REFERENCES customers(id) ON UPDATE CASCADE ON DELETE RESTRICT,
  supplier_id   BIGINT REFERENCES suppliers(id) ON UPDATE CASCADE ON DELETE RESTRICT,
  payment_ref   TEXT, -- bank ref, cheque no, UPI txn id etc.
  amount        NUMERIC(14,2) NOT NULL,
  currency_code CHAR(3) NOT NULL DEFAULT 'INR',
  paid_at       TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  notes         TEXT,
  created_by    BIGINT REFERENCES users(id) ON UPDATE CASCADE ON DELETE SET NULL,
  created_at    TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at    TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  CONSTRAINT payments_party_check CHECK (
    (type = 'INCOMING' AND customer_id IS NOT NULL AND supplier_id IS NULL) OR
    (type = 'OUTGOING' AND supplier_id IS NOT NULL AND customer_id IS NULL)
  )
);
CREATE INDEX payments_company_idx ON payments(company_id);
CREATE INDEX payments_customer_idx ON payments(customer_id);
CREATE INDEX payments_supplier_idx ON payments(supplier_id);

CREATE TABLE payment_allocations (
  id              BIGSERIAL PRIMARY KEY,
  payment_id      BIGINT NOT NULL REFERENCES payments(id) ON UPDATE CASCADE ON DELETE CASCADE,
  invoice_id      BIGINT NOT NULL REFERENCES invoices(id) ON UPDATE CASCADE ON DELETE RESTRICT,
  amount_applied  NUMERIC(14,2) NOT NULL,
  created_at      TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  CONSTRAINT payment_allocations_unique UNIQUE (payment_id, invoice_id)
);
CREATE INDEX payment_allocations_invoice_idx ON payment_allocations(invoice_id);

-- =============================
-- TRIGGERS (timestamps)
-- =============================
CREATE OR REPLACE FUNCTION set_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Attach to tables having updated_at
DO $$ DECLARE r RECORD; BEGIN
  FOR r IN SELECT table_name FROM information_schema.columns 
           WHERE table_schema = 'public' AND column_name = 'updated_at'
  LOOP
    EXECUTE format('DROP TRIGGER IF EXISTS %I_updated_at ON %I; CREATE TRIGGER %I_updated_at BEFORE UPDATE ON %I FOR EACH ROW EXECUTE PROCEDURE set_updated_at();', r.table_name, r.table_name, r.table_name, r.table_name);
  END LOOP;
END $$;

-- =============================
-- SUGGESTED EXTENSIONS (optional)
-- =============================
-- Enable for GIN trigram indexes used above
-- CREATE EXTENSION IF NOT EXISTS pg_trgm;

-- =============================
-- NOTES
-- - Monetary fields use NUMERIC(14,2). Adjust precision/scale as needed.
-- - currency_code defaults to 'INR'. Change to your base currency if different.
-- - For inventory balance, query v_inventory_on_hand. Consider materialized view for performance.
