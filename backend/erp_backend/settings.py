"""
Django settings for erp_backend project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-_b%09^9^+er2z28tflb7v2%ti52*%!@w1%t43zf@(#7s#9osrn'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Third-party apps
    'rest_framework',           # Django REST Framework: build APIs
    'corsheaders',              # Handle Cross-Origin Resource Sharing (CORS)
    # Local apps
    'core',
    'authentication',
    'inventory',
    'sales',
    'purchases',
    'accounting',
    'reports',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # CORS: must be high in the list
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'erp_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'erp_backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

import os
from dotenv import load_dotenv
import dj_database_url

load_dotenv(os.path.join(BASE_DIR, '..', '.env'))

# Prefer a single DATABASE_URL (easiest to copy/paste),
# else fall back to individual POSTGRES_* variables.
DATABASE_URL = os.getenv('DATABASE_URL')
if DATABASE_URL:
    # Example: postgresql+psycopg://user:pass@localhost:5432/minimal_erp
    DATABASES = {
        'default': dj_database_url.parse(DATABASE_URL, conn_max_age=600)
    }
else:
    POSTGRES_DB = os.getenv('POSTGRES_DB')
    if POSTGRES_DB:
        # Configure Postgres using individual env vars for beginner-friendly setups
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.postgresql',
                # Database name (e.g., minimal_erp)
                'NAME': POSTGRES_DB,
                # Database user (e.g., postgres)
                'USER': os.getenv('POSTGRES_USER', ''),
                # Password for the user (can be empty for peer/local auth)
                'PASSWORD': os.getenv('POSTGRES_PASSWORD', ''),
                # Host of the database server (localhost for local dev)
                'HOST': os.getenv('POSTGRES_HOST', 'localhost'),
                # Port Postgres is listening on (default 5432)
                'PORT': os.getenv('POSTGRES_PORT', '5432'),
                # Keep connections open for reuse (in seconds)
                'CONN_MAX_AGE': int(os.getenv('PG_CONN_MAX_AGE', '600')),
            }
        }
    else:
        # Fallback to SQLite for quick starts when no Postgres env vars are set
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': BASE_DIR / 'db.sqlite3',
            }
        }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [BASE_DIR / 'static']

MEDIA_URL = 'media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Use custom user model from authentication app
AUTH_USER_MODEL = 'authentication.User'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
